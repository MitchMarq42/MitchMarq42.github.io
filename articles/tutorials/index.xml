<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Best Site Ever! (not)</title><link>https://mitchmarq42.xyz/articles/tutorials/</link><description>Recent content in Tutorials on The Best Site Ever! (not)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mitchmarq42.xyz/articles/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>A better =cat= for Eshell</title><link>https://mitchmarq42.xyz/articles/tutorials/supercat/</link><pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><guid>https://mitchmarq42.xyz/articles/tutorials/supercat/</guid><description>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
tl;dr: Scroll to bottom
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Part 1: Awesome syntax-highlighted &lt;code class="verbatim">cat&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>A few weeks ago I was wasting time on Reddit. There was a post on r/emacs
recommending &lt;a href="https://github.com/manateelazycat/aweshell">AwEshell&lt;/a>. There&amp;#39;s several features listed, many of which I don&amp;#39;t
particularly care about– multiple buffers (&lt;code>C-u&lt;/code> works for me); IDE-style window
placement (I treat eshell like a tmux pane or terminal window). But one struck
my eye:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Make cat file with syntax highlight.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>
Now that&amp;#39;s a cool idea.&lt;/p>
&lt;p>
Here&amp;#39;s the function, with some minor modifications:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span> (defun aweshell-cat-with-syntax-highlight (filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Like cat(1) but with syntax highlighting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Taken from https://github.com/manateelazycat/aweshell/blob/d246df619573ca3f46070cc0ac82d024271ed243/aweshell.el#L775&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((existing-buffer (&lt;span style="color:#a6e22e">get-file-buffer&lt;/span> filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (buffer (find-file-noselect filename)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (eshell-print
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-current-buffer buffer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (&lt;span style="color:#a6e22e">fboundp&lt;/span> &lt;span style="color:#e6db74">&amp;#39;font-lock-ensure&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (font-lock-ensure)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-no-warnings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (font-lock-fontify-buffer)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((contents (&lt;span style="color:#a6e22e">buffer-string&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">remove-text-properties&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> (&lt;span style="color:#a6e22e">length&lt;/span> contents) &lt;span style="color:#f92672">&amp;#39;&lt;/span>(read-only &lt;span style="color:#66d9ef">nil&lt;/span>) contents)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contents)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (unless existing-buffer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">kill-buffer&lt;/span> buffer)) &lt;span style="color:#66d9ef">nil&lt;/span>))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
Part 2: To display an image
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;div id="outline-container-headline-4" class="outline-3">
&lt;h3 id="headline-4">
&lt;/h3>
&lt;div id="outline-text-headline-4" class="outline-text-3">
&lt;p>There&amp;#39;s this Linux utility &lt;a href="https://github.com/posva/catimg">catimg&lt;/a> that converts images to true-color unicode
blocks and prints them to your terminal. It&amp;#39;s nice to just view the rough image
in the terminal, without having to open another window or – Kamisama forbid –
use the mouse.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>The Kitty terminal has &lt;a href="https://sw.kovidgoyal.net/kitty/kittens/icat/">a module (&amp;#34;Kitten&amp;#34;)&lt;/a> for displaying images. It works very
similarly to &lt;code class="verbatim">catimg&lt;/code>, but uses Kitty&amp;#39;s custom graphics protocol, and thus can
show pixel-perfect data, not just chunks.&lt;/p>
&lt;p>
When I&amp;#39;m in Kitty for any significant period of time, I tend to&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> alias catimg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;kitty +icat&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>just to remember better.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>I recently signed up to Mastadon – specifically the &lt;a href="https://emacs.ch">https://emacs.ch&lt;/a>
instance. It&amp;#39;s still very new, but there&amp;#39;s a bunch of cool people on
there. Recently Xenodium (real name Álvaro Ramírez) posted a link to [[this
blog][&lt;a href="https://xenodium.com/wizard-zines-comics-eshell-util/]]">https://xenodium.com/wizard-zines-comics-eshell-util/]]&lt;/a> in which he showcases a
custom function to view a specific image from a collection.&lt;/p>
&lt;p>
I thought it was odd that we don&amp;#39;t have an &lt;code class="verbatim">eshell/catimg&lt;/code> command to wrap, so I
did a little googling…&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-3">
&lt;h3 id="headline-7">
&lt;/h3>
&lt;div id="outline-text-headline-7" class="outline-text-3">
&lt;p>… And immediately arrived at &lt;a href="https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode">this StackExchange question&lt;/a> about &lt;code class="verbatim">cat&lt;/code>-ing files
and images with just &lt;code class="verbatim">cat&lt;/code>.&lt;/p>
&lt;p>
The first answer is about using &lt;code class="verbatim">iimage-mode&lt;/code>, which is a whole &amp;#39;nother thing, and
I probably need to check it out at some point.&lt;/p>
&lt;p>
The second answer, the accepted one, uses Advice and a similar method to
Xenodium&amp;#39;s to display the image. Here&amp;#39;s the magic:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">add-text-properties&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> (&lt;span style="color:#a6e22e">length&lt;/span> arg)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>(display &lt;span style="color:#f92672">,&lt;/span>(create-image file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> modification-hooks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (iimage-modification-hook))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (eshell-buffered-print arg)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Of course, that&amp;#39;s in the middle of a long function that&amp;#39;s meant to be run as
advice. I don&amp;#39;t like Advice in principle, so I kept scrolling.&lt;/p>
&lt;p>
The third answer went on a tangent about inserting screenshots into Markdown
files. Which is cool, but not today.&lt;/p>
&lt;p>
The fourth answer should have been accepted. &lt;br>
First, there&amp;#39;s a basic snippet for displaying images. But the answerer notes
that big images don&amp;#39;t fit. So they provide some more thorough functions that
resize files.&lt;/p>
&lt;p>
For our copying convenience, here&amp;#39;s that whole snippet but with all the functions renamed
and credited:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span> (defun esh-catimg--imagep (filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Check if FILENAME is an image. Helper for &lt;/span>&lt;span style="color:#e6db74">`esh-catimg--image-print&amp;#39;&lt;/span>&lt;span style="color:#e6db74">.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Taken from https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((extension (file-name-extension filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (image-extensions &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;png&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;jpg&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bmp&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">member&lt;/span> extension image-extensions)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (defun esh-catimg--image-width (filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Get the pixel (?) width of the image FILENAME, using imagemagick. Helper
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for &lt;/span>&lt;span style="color:#e6db74">`esh-catimg--image-print&amp;#39;&lt;/span>&lt;span style="color:#e6db74">.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Taken from https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-to-number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command-to-string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#e6db74">&amp;#34;convert &amp;#39;%s&amp;#39; -ping -format \&amp;#34;%%w\&amp;#34; info:&amp;#34;&lt;/span> filename))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (defun esh-catimg--rescale-image (filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Rescale an image to a maximum width, or leave untouched if already small.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Returns the new file path. Helper for &lt;/span>&lt;span style="color:#e6db74">`esh-catimg--image-print&amp;#39;&lt;/span>&lt;span style="color:#e6db74">.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Taken from https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((file (make-temp-file &lt;span style="color:#e6db74">&amp;#34;resized_emacs&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (max-width &lt;span style="color:#ae81ff">350&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (&lt;span style="color:#a6e22e">&amp;gt;&lt;/span> (esh-catimg--image-width filename) max-width)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (progn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command-to-string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#e6db74">&amp;#34;convert -resize %dx &amp;#39;%s&amp;#39; &amp;#39;%s&amp;#39;&amp;#34;&lt;/span> max-width filename file))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (defun esh-catimg--image-print (file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Print the single image FILE.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Taken from https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (eshell/printnl (&lt;span style="color:#a6e22e">propertize&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;display&lt;/span> (create-image file))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-2">
&lt;h2 id="headline-8">
Putting it all together
&lt;/h2>
&lt;div id="outline-text-headline-8" class="outline-text-2">
&lt;p>So, to recap: We have&lt;/p>
&lt;ol>
&lt;li>&lt;code class="verbatim">aweshell-cat-with-syntax-highlighting&lt;/code> to dump any text file to eshell with syntax highlighting&lt;/li>
&lt;li>&lt;code class="verbatim">esh-catimg--image-print&lt;/code> to display any image to eshell in a reasonable size&lt;/li>
&lt;/ol>
&lt;p>So now it&amp;#39;s time to put it all together. Here&amp;#39;s &lt;code class="verbatim">eshell/cat&lt;/code> with most of the guts
ripped out and replaced with our helper functions.&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span> (defun eshell/cat (&lt;span style="color:#66d9ef">&amp;amp;rest&lt;/span> args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Wrapper around &lt;/span>&lt;span style="color:#e6db74">`aweshell-cat-with-syntax-highlight&amp;#39;&lt;/span>&lt;span style="color:#e6db74"> for multiple ARGS.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Also, can cat images for some reason.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">See:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">https://github.com/manateelazycat/aweshell/blob/d246df619573ca3f46070cc0ac82d024271ed243/aweshell.el#L775
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">https://emacs.stackexchange.com/questions/3432/display-images-in-eshell-with-iimage-mode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq args (eshell-stringify-list (flatten-tree args)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (dolist (file args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (string= file &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (throw &lt;span style="color:#e6db74">&amp;#39;eshell-external&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (eshell-external-command &lt;span style="color:#e6db74">&amp;#34;cat&amp;#34;&lt;/span> args))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (esh-catimg--imagep file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (esh-catimg--image-print (esh-catimg--rescale-image file))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (aweshell-cat-with-syntax-highlight file)))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>It iterates over each argument and applies the correct function.&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Scraping</title><link>https://mitchmarq42.xyz/articles/tutorials/scraping/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://mitchmarq42.xyz/articles/tutorials/scraping/</guid><description>
&lt;p>(This article is currently incomplete. I will work on it more later.)&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Using &lt;code class="verbatim">sed&lt;/code> and &lt;code class="verbatim">curl&lt;/code> to extract information from webpages
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>—-&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
Introduction
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;p>I&amp;#39;ll go over a bit more technicalities in my article on &lt;code class="verbatim">grep&lt;/code>, but I wanted to discuss a practical use of UNIX command-line tools. This is also in relation to data-hoarding, but we&amp;#39;ll get into that.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
The problem
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;p>Detective Conan is a very long-running anime. It is basiscally season-less and has been running more-or-less continuously since 1996. As of the time of writing, there are 1036 episodes out, and every week that number ticks up by one. It&amp;#39;s also not a masterpiece, so about 42% of that is filler.
The easy solution is to just not watch it, but I think we can do better. Here is how I found a list of canon/plot-relevant episodes, and extracted that into something to be used with various other tools at my disposal– and how you can too!&lt;/p>
&lt;p>
&lt;code class="verbatim">=&lt;/code>&lt;/p>
&lt;p>
First we google (or bing, or duck, or brave) for &amp;#34;detective conan list of important episodes&amp;#34;. &lt;a href="https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0">This&lt;/a> is the top result on Google and Brave, and is thankfully also the one I used in the past to come up with the following procedure.&lt;/p>
&lt;p>
In the browser, it&amp;#39;s a pretty good page. Decorated but tasteful, modern but not bloated. Run basically by one guy, who strives to not use JavaScript as much as possible (an honorable goal).&lt;/p>
&lt;p>
But we&amp;#39;re working in the command line. And on the command line, everything is reduced to plaintext. If you&amp;#39;re lucky enough to not know what HTML looks like, here&amp;#39;s a sample from the aformentioned page (obtained with &lt;code class="verbatim">curl &amp;#39;https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0&amp;#39;&lt;/code>):&lt;/p>
&lt;div class="src src-html">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;=Main Plot=&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;971-974&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; [INTL 1028-1031] (manga 1013-1017|V95F10-V96F3):&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span>&amp;gt;Detective &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Chiba&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; and &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Miike&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Kuroda&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Amuro&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. Plus a development for &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Yumi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; and &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Shūkichi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; in the background. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;=Main Plot=&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;983-984&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; [INTL 1040-1041] (manga 1018-1021|V96F4-7):&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Heiji&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; case, &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Kaitō Kid&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;, &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Morofushi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development, &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Amuro&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development, and &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Hiromitsu&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;=Main Plot=&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;993-995&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; [INTL 1050-1052] (manga 1022-1026|V96F8-V97F1):&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Sera Masumi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. Also, &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Sorry. You shouldn&amp;#39;t have had to endure that. In fact, you probably didn&amp;#39;t. I bet your eyes glazed over. In fact, this is just a segment from near the end of a &lt;span style="text-decoration: underline;">huge&lt;/span> pagagraph which actually contains everything we&amp;#39;ve been looking for. Obviously, just reading it like this isn&amp;#39;t really doable. Let&amp;#39;s chop it up into some better pieces.&lt;/p>
&lt;p>
&lt;code class="verbatim">sed&lt;/code> is a stream editor. You give it a stream of text, and it applies a rule or conversion to the text according to the expression you put after it (the first &lt;strong>argument&lt;/strong>.) It is often used for search-and-replace.&lt;/p>
&lt;p>
For example, we can convert every instance of &lt;code class="verbatim">&amp;gt;&amp;lt;&lt;/code> to, say, &lt;code class="verbatim">&amp;gt; &amp;lt;&lt;/code> or better yet to&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Here&amp;#39;s the command now:&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> curl &lt;span style="color:#e6db74">&amp;#39;https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/&amp;gt;&amp;lt;/&amp;gt;\n&amp;lt;/g&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
The &lt;code class="verbatim">s/thing1/thing2/g&lt;/code> tells &lt;code class="verbatim">sed&lt;/code> to _S_ubstitute thing1 with thing2 _G_lobally, every time in the line. Without the &lt;code class="verbatim">g&lt;/code> it would only do the first one (which is useful but not here). That &lt;code class="verbatim">\n&lt;/code> is what&amp;#39;s called a &lt;strong>regular expression&lt;/strong>– this one specifically means &amp;#34;newline&amp;#34;. You often can&amp;#39;t type an actual Enter character on the command line because it&amp;#39;ll try to execute, so using &lt;code class="verbatim">\n&lt;/code> works better.&lt;/p>
&lt;p>
Anyway.&lt;/p>
&lt;p>
Now the bits of that paragraph each look something like this:&lt;/p>
&lt;div class="src src-html">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;971-974&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; [INTL 1028-1031] (manga 1013-1017|V95F10-V96F3):&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span>&amp;gt;Detective &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Chiba&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; and &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Miike&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Kuroda&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Amuro&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; development. Plus a development for &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Yumi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; and &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Shūkichi&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; in the background. &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-pos&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;=Main Plot=&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Not completely immune to overlong lines, but it&amp;#39;s something.
Now pay attention to that line that says &lt;code class="verbatim">class =&amp;#39;dc-list-no&amp;#39;&amp;gt;971-974&amp;lt;/span&amp;gt;&lt;/code>. If we go back to the browser and control-F &amp;#39;971-974&amp;#39; we find… that there are no results because the page is portioned out per hundred episodes. Let&amp;#39;s click on the 900s tab and try again.&lt;/p>
&lt;p>
Aaand it looks like this:&lt;/p>
&lt;p>
&lt;strong>971-974&lt;/strong> [INTL 1028-1031] (manga 1013-1017|V95F10-V96F3): Detective Chiba and Miike development. Kuroda development. Amuro development. Plus a development for Yumi and Shūkichi in the background. \**Main Plot*\*&lt;/p>
&lt;p>
As you can see, the author has very kindly left a keyword next to every episode number or range that does not appear in the page itself: &lt;code class="verbatim">dc-list-no&lt;/code>. Let&amp;#39;s try &lt;code class="verbatim">grep&lt;/code> ing the whole mess for that string.&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> curl &lt;span style="color:#e6db74">&amp;#39;https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/&amp;gt;&amp;lt;/&amp;gt;\n&amp;lt;/g&amp;#39;&lt;/span> | grep &lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Now we end up with blocks that look like&lt;/p>
&lt;div class="src src-html">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;971-974&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; [INTL 1028-1031] (manga 1013-1017|V95F10-V96F3):&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-char&amp;#39;&lt;/span>&amp;gt;Detective &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ja-Latn&amp;#39;&lt;/span>&amp;gt;Chiba&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;*Main Plot*&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Hmmm. Not perfect. But we&amp;#39;re getting there. Most lines now either contain the episode numbers like we want, or not much numbers at all. There are some like&lt;/p>
&lt;div class="src src-html">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span>&amp;gt;(Both 1 Hour Specials)&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>but that&amp;#39;s probably alright as you&amp;#39;ll see.&lt;/p>
&lt;p>
—-&lt;/p>
&lt;p>
What we can do now is filter for the numbers themselves. We know that there are &lt;code class="verbatim">&amp;gt;&amp;lt;&lt;/code> around the numbers, and they can be in either &lt;code class="verbatim">XYY-XYZ&lt;/code> format, or just a single number.&lt;/p>
&lt;p>
In extended regex, a sequence in &lt;code class="verbatim">[square brackets]&lt;/code> denotes a set of possible matches of each character. So, for example, &lt;code class="verbatim">[ckq]&lt;/code> will match a lowercase c, or a lowercase k, or a lowercase q. The spec also allows for comon ranges, like &lt;code class="verbatim">[A-Z]&lt;/code> (any uppercase letter), &lt;code class="verbatim">[a-z]&lt;/code> (any lowercase letter), or for our use case, &lt;code class="verbatim">[0-9]&lt;/code>, any single number digit.&lt;/p>
&lt;p>
So we can &lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> curl &lt;span style="color:#e6db74">&amp;#39;https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/&amp;gt;&amp;lt;/&amp;gt;\n&amp;lt;/g&amp;#39;&lt;/span> | grep &lt;span style="color:#e6db74">&amp;#39;dc-list-no&amp;#39;&lt;/span> | sed &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
… This is never getting finished. I don&amp;#39;t have the time or energy.&lt;/p>
&lt;p>
Here&amp;#39;s a better version by the legendary Chokerman:&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> curl -s &lt;span style="color:#e6db74">&amp;#39;https://www.xerblade.com/p/detective-conan-important-episode-list.html?m=0&amp;#39;&lt;/span>|grep -Eo &lt;span style="color:#e6db74">&amp;#34;dc-list-no\&amp;#39;&amp;gt;[0-9].*?&amp;lt;&amp;#34;&lt;/span>|sed -nr &lt;span style="color:#e6db74">&amp;#39;s/.*&amp;gt;(.*)&amp;lt;.*/\1/p&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>(inciting incident &lt;a href="https://github.com/pystardust/ani-cli/issues/723">here&lt;/a>)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item></channel></rss>